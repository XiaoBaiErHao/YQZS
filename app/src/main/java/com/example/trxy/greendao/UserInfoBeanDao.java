package com.example.trxy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.trxy.bean.UserInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_BEAN".
*/
public class UserInfoBeanDao extends AbstractDao<UserInfoBean, Long> {

    public static final String TABLENAME = "USER_INFO_BEAN";

    /**
     * Properties of entity UserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "_id");
        public final static Property UserLoginName = new Property(1, String.class, "userLoginName", false, "USER_LOGIN_NAME");
        public final static Property UserLoginPwd = new Property(2, String.class, "userLoginPwd", false, "USER_LOGIN_PWD");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property UserHeadUrl = new Property(4, String.class, "userHeadUrl", false, "USER_HEAD_URL");
        public final static Property UserAddress = new Property(5, String.class, "userAddress", false, "USER_ADDRESS");
        public final static Property UserEmail = new Property(6, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property UserSex = new Property(7, String.class, "userSex", false, "USER_SEX");
        public final static Property UserBrithday = new Property(8, String.class, "userBrithday", false, "USER_BRITHDAY");
        public final static Property UserTel = new Property(9, String.class, "userTel", false, "USER_TEL");
        public final static Property UserPhone = new Property(10, String.class, "userPhone", false, "USER_PHONE");
        public final static Property UserLevel = new Property(11, String.class, "userLevel", false, "USER_LEVEL");
        public final static Property CreateTime = new Property(12, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateUserId = new Property(13, String.class, "createUserId", false, "CREATE_USER_ID");
        public final static Property CreateUserName = new Property(14, String.class, "createUserName", false, "CREATE_USER_NAME");
        public final static Property UserLatitude = new Property(15, Double.class, "userLatitude", false, "USER_LATITUDE");
        public final static Property UserLongitude = new Property(16, Double.class, "userLongitude", false, "USER_LONGITUDE");
    }


    public UserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userId
                "\"USER_LOGIN_NAME\" TEXT," + // 1: userLoginName
                "\"USER_LOGIN_PWD\" TEXT," + // 2: userLoginPwd
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"USER_HEAD_URL\" TEXT," + // 4: userHeadUrl
                "\"USER_ADDRESS\" TEXT," + // 5: userAddress
                "\"USER_EMAIL\" TEXT," + // 6: userEmail
                "\"USER_SEX\" TEXT," + // 7: userSex
                "\"USER_BRITHDAY\" TEXT," + // 8: userBrithday
                "\"USER_TEL\" TEXT," + // 9: userTel
                "\"USER_PHONE\" TEXT," + // 10: userPhone
                "\"USER_LEVEL\" TEXT," + // 11: userLevel
                "\"CREATE_TIME\" TEXT," + // 12: createTime
                "\"CREATE_USER_ID\" TEXT," + // 13: createUserId
                "\"CREATE_USER_NAME\" TEXT," + // 14: createUserName
                "\"USER_LATITUDE\" REAL," + // 15: userLatitude
                "\"USER_LONGITUDE\" REAL);"); // 16: userLongitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String userLoginName = entity.getUserLoginName();
        if (userLoginName != null) {
            stmt.bindString(2, userLoginName);
        }
 
        String userLoginPwd = entity.getUserLoginPwd();
        if (userLoginPwd != null) {
            stmt.bindString(3, userLoginPwd);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userHeadUrl = entity.getUserHeadUrl();
        if (userHeadUrl != null) {
            stmt.bindString(5, userHeadUrl);
        }
 
        String userAddress = entity.getUserAddress();
        if (userAddress != null) {
            stmt.bindString(6, userAddress);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(7, userEmail);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(8, userSex);
        }
 
        String userBrithday = entity.getUserBrithday();
        if (userBrithday != null) {
            stmt.bindString(9, userBrithday);
        }
 
        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(10, userTel);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(11, userPhone);
        }
 
        String userLevel = entity.getUserLevel();
        if (userLevel != null) {
            stmt.bindString(12, userLevel);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(13, createTime);
        }
 
        String createUserId = entity.getCreateUserId();
        if (createUserId != null) {
            stmt.bindString(14, createUserId);
        }
 
        String createUserName = entity.getCreateUserName();
        if (createUserName != null) {
            stmt.bindString(15, createUserName);
        }
 
        Double userLatitude = entity.getUserLatitude();
        if (userLatitude != null) {
            stmt.bindDouble(16, userLatitude);
        }
 
        Double userLongitude = entity.getUserLongitude();
        if (userLongitude != null) {
            stmt.bindDouble(17, userLongitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String userLoginName = entity.getUserLoginName();
        if (userLoginName != null) {
            stmt.bindString(2, userLoginName);
        }
 
        String userLoginPwd = entity.getUserLoginPwd();
        if (userLoginPwd != null) {
            stmt.bindString(3, userLoginPwd);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userHeadUrl = entity.getUserHeadUrl();
        if (userHeadUrl != null) {
            stmt.bindString(5, userHeadUrl);
        }
 
        String userAddress = entity.getUserAddress();
        if (userAddress != null) {
            stmt.bindString(6, userAddress);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(7, userEmail);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(8, userSex);
        }
 
        String userBrithday = entity.getUserBrithday();
        if (userBrithday != null) {
            stmt.bindString(9, userBrithday);
        }
 
        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(10, userTel);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(11, userPhone);
        }
 
        String userLevel = entity.getUserLevel();
        if (userLevel != null) {
            stmt.bindString(12, userLevel);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(13, createTime);
        }
 
        String createUserId = entity.getCreateUserId();
        if (createUserId != null) {
            stmt.bindString(14, createUserId);
        }
 
        String createUserName = entity.getCreateUserName();
        if (createUserName != null) {
            stmt.bindString(15, createUserName);
        }
 
        Double userLatitude = entity.getUserLatitude();
        if (userLatitude != null) {
            stmt.bindDouble(16, userLatitude);
        }
 
        Double userLongitude = entity.getUserLongitude();
        if (userLongitude != null) {
            stmt.bindDouble(17, userLongitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoBean readEntity(Cursor cursor, int offset) {
        UserInfoBean entity = new UserInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userLoginName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userLoginPwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userHeadUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userEmail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userSex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userBrithday
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userTel
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userPhone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userLevel
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // createTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createUserId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // createUserName
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // userLatitude
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16) // userLongitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserLoginName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserLoginPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserHeadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserBrithday(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserTel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserLevel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreateUserId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreateUserName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUserLatitude(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setUserLongitude(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoBean entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoBean entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
